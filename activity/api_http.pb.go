// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: activity/api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationActivityActivityVersion = "/activity.Activity/ActivityVersion"

type ActivityHTTPServer interface {
	// ActivityVersion 增加玩家购买的礼包次数
	ActivityVersion(context.Context, *Empty) (*ActivityVersionResp, error)
}

func RegisterActivityHTTPServer(s *http.Server, srv ActivityHTTPServer) {
	r := s.Route("/")
	r.GET("activity/version", _Activity_ActivityVersion0_HTTP_Handler(srv))
}

func _Activity_ActivityVersion0_HTTP_Handler(srv ActivityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityActivityVersion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ActivityVersion(ctx, req.(*Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActivityVersionResp)
		return ctx.Result(200, reply)
	}
}

type ActivityHTTPClient interface {
	ActivityVersion(ctx context.Context, req *Empty, opts ...http.CallOption) (rsp *ActivityVersionResp, err error)
}

type ActivityHTTPClientImpl struct {
	cc *http.Client
}

func NewActivityHTTPClient(client *http.Client) ActivityHTTPClient {
	return &ActivityHTTPClientImpl{client}
}

func (c *ActivityHTTPClientImpl) ActivityVersion(ctx context.Context, in *Empty, opts ...http.CallOption) (*ActivityVersionResp, error) {
	var out ActivityVersionResp
	pattern := "activity/version"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityActivityVersion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
